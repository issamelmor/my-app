{"version":3,"file":"index.modern.js","sources":["../src/styles.ts","../src/index.tsx"],"sourcesContent":["import styled, { createGlobalStyle } from 'styled-components';\n\nexport const GlobalStyle = createGlobalStyle`\n  :root {\n    --ReactInputVerificationCode-itemWidth: 4.5rem;\n    --ReactInputVerificationCode-itemHeight: 5rem;\n    --ReactInputVerificationCode-itemSpacing: 1rem;\n  }\n`;\n\ninterface ContainerProps {\n  itemsCount: number;\n}\n\nexport const Container = styled.div<ContainerProps>`\n  display: flex;\n  position: relative;\n  justify-content: space-between;\n  width: ${({ itemsCount }) =>\n    `calc(\n      var(--ReactInputVerificationCode-itemWidth) * ${itemsCount}\n      + var(--ReactInputVerificationCode-itemSpacing) * (${itemsCount} - 1)\n    )`};\n`;\n\ninterface InputProps {\n  activeIndex: number;\n}\n\nexport const Input = styled.input<InputProps>`\n  position: absolute;\n  top: 0;\n  left: ${({ activeIndex }) =>\n    `calc(\n      var(--ReactInputVerificationCode-itemWidth) * ${activeIndex}\n      + var(--ReactInputVerificationCode-itemSpacing) * ${activeIndex}\n    )`};\n  opacity: 0;\n  width: var(--ReactInputVerificationCode-itemWidth);\n  height: var(--ReactInputVerificationCode-itemHeight);\n`;\n\nexport const Item = styled.div`\n  width: var(--ReactInputVerificationCode-itemWidth);\n  height: var(--ReactInputVerificationCode-itemHeight);\n  padding: 0;\n  border-radius: 4px;\n  font-size: 1.5rem;\n  font-weight: 800;\n  line-height: var(--ReactInputVerificationCode-itemHeight);\n  text-align: center;\n  border: 0;\n  box-shadow: inset 0 0 0 1px #ccc;\n  transition: box-shadow 0.2s ease-out;\n\n  &.is-active {\n    box-shadow: inset 0 0 0 2px #888;\n  }\n`;\n","import * as React from 'react';\nimport * as S from './styles';\n\nconst KEY_CODE = {\n  BACKSPACE: 8,\n  ARROW_LEFT: 37,\n  ARROW_RIGHT: 39,\n  DELETE: 46,\n};\n\nexport interface ReactInputVerificationCodeProps {\n  autoFocus?: boolean;\n  length?: number;\n  onChange?: (data: string) => void;\n  onCompleted?: (data: string) => void;\n  placeholder?: string;\n  value?: string;\n  dataCy?: string;\n  type?: 'text' | 'password';\n  passwordMask?: string;\n}\n\nconst ReactInputVerificationCode = ({\n  autoFocus = false,\n  length = 4,\n  onChange = () => {},\n  onCompleted = () => {},\n  placeholder = '·',\n  value: pValue,\n  dataCy = 'verification-code',\n  type = 'text',\n  passwordMask = '•',\n}: ReactInputVerificationCodeProps) => {\n  const emptyValue = new Array(length).fill(placeholder);\n\n  const [activeIndex, setActiveIndex] = React.useState<number>(-1);\n  const [value, setValue] = React.useState<string[]>(\n    pValue ? pValue.split('') : emptyValue\n  );\n\n  const codeInputRef = React.createRef<HTMLInputElement>();\n  const itemsRef = React.useMemo(\n    () =>\n      new Array(length).fill(null).map(() => React.createRef<HTMLDivElement>()),\n    [length]\n  );\n\n  const isCodeRegex = new RegExp(`^[0-9]{${length}}$`);\n\n  const getItem = (index: number) => itemsRef[index]?.current;\n  const focusItem = (index: number): void => getItem(index)?.focus();\n  const blurItem = (index: number): void => getItem(index)?.blur();\n\n  const onItemFocus = (index: number) => () => {\n    setActiveIndex(index);\n    if (codeInputRef.current) codeInputRef.current.focus();\n  };\n\n  const onInputKeyUp = ({ key, keyCode }: React.KeyboardEvent) => {\n    const newValue = [...value];\n    const nextIndex = activeIndex + 1;\n    const prevIndex = activeIndex - 1;\n\n    const codeInput = codeInputRef.current;\n    const currentItem = getItem(activeIndex);\n\n    const isLast = nextIndex === length;\n    const isDeleting =\n      keyCode === KEY_CODE.DELETE || keyCode === KEY_CODE.BACKSPACE;\n\n    // keep items focus in sync\n    onItemFocus(activeIndex);\n\n    // on delete, replace the current value\n    // and focus on the previous item\n    if (isDeleting) {\n      newValue[activeIndex] = placeholder;\n      setValue(newValue);\n\n      if (activeIndex > 0) {\n        setActiveIndex(prevIndex);\n        focusItem(prevIndex);\n      }\n\n      return;\n    }\n\n    // if the key pressed is not a number\n    // don't do anything\n    if (Number.isNaN(+key)) return;\n\n    // reset the current value\n    // and set the new one\n    if (codeInput) codeInput.value = '';\n    newValue[activeIndex] = key;\n    setValue(newValue);\n\n    if (!isLast) {\n      setActiveIndex(nextIndex);\n      focusItem(nextIndex);\n      return;\n    }\n\n    if (codeInput) codeInput.blur();\n    if (currentItem) currentItem.blur();\n\n    setActiveIndex(-1);\n  };\n\n  // handle mobile autocompletion\n  const onInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value: changeValue } = e.target;\n    const isCode = isCodeRegex.test(changeValue);\n\n    if (!isCode) return;\n\n    setValue(changeValue.split(''));\n    blurItem(activeIndex);\n  };\n\n  const onInputBlur = () => {\n    // https://github.com/ugogo/react-input-verification-code/issues/1\n    if (activeIndex === -1) return;\n\n    blurItem(activeIndex);\n    setActiveIndex(-1);\n  };\n\n  // autoFocus\n  React.useEffect(() => {\n    if (autoFocus && itemsRef[0].current) {\n      itemsRef[0].current.focus();\n    }\n  }, []);\n\n  // handle pasting\n  React.useEffect(() => {\n    const codeInput = codeInputRef.current;\n    if (!codeInput) return;\n\n    const onPaste = (e: ClipboardEvent) => {\n      e.preventDefault();\n\n      const pastedString = e.clipboardData?.getData('text');\n      if (!pastedString) return;\n\n      const isNumber = /^\\d+$/.test(pastedString);\n      if (isNumber) setValue(pastedString.split('').slice(0, length));\n    };\n\n    codeInput.addEventListener('paste', onPaste);\n    return () => codeInput.removeEventListener('paste', onPaste);\n  }, []);\n\n  React.useEffect(() => {\n    const stringValue = value.join('');\n    const isCompleted = stringValue.length === length;\n\n    if (isCompleted && stringValue !== emptyValue.join(''))\n      onCompleted(stringValue);\n    onChange(stringValue);\n  }, [value, length]);\n\n  React.useEffect(() => {\n    if (typeof pValue !== 'string') return;\n\n    // avoid infinite loop\n    if (pValue === '' && value.join('') === emptyValue.join('')) return;\n\n    // keep internal and external states in sync\n    if (pValue !== value.join('')) setValue(pValue.split(''));\n  }, [pValue]);\n\n  const renderItemText = (itemValue: string) => {\n    if (itemValue === placeholder) return placeholder;\n    return type === 'password' ? passwordMask : itemValue;\n  };\n\n  return (\n    <React.Fragment>\n      <S.GlobalStyle />\n\n      <S.Container\n        className='ReactInputVerificationCode__container'\n        // needed for styling\n        itemsCount={length}\n      >\n        <S.Input\n          ref={codeInputRef}\n          className='ReactInputVerificationCode__input'\n          autoComplete='one-time-code'\n          type='text'\n          inputMode='decimal'\n          id='one-time-code'\n          // use onKeyUp rather than onChange for a better control\n          // onChange is still needed to handle the autocompletion\n          // when receiving a code by SMS\n          onChange={onInputChange}\n          onKeyUp={onInputKeyUp}\n          onBlur={onInputBlur}\n          // needed for styling\n          activeIndex={activeIndex}\n          data-cy={`${dataCy}-otc-input`}\n        />\n\n        {itemsRef.map((ref, i) => (\n          <S.Item\n            key={i}\n            ref={ref}\n            role='button'\n            tabIndex={0}\n            className={`ReactInputVerificationCode__item ${\n              value[i] !== placeholder ? 'is-filled' : ''\n            } ${i === activeIndex ? 'is-active' : ''}`}\n            onFocus={onItemFocus(i)}\n            data-cy={`${dataCy}-${i}-item`}\n          >\n            {renderItemText(value[i])}\n          </S.Item>\n        ))}\n      </S.Container>\n    </React.Fragment>\n  );\n};\n\nexport default ReactInputVerificationCode;\n"],"names":["GlobalStyle","createGlobalStyle","Container","styled","div","itemsCount","Input","input","activeIndex","Item","KEY_CODE","BACKSPACE","ARROW_LEFT","ARROW_RIGHT","DELETE","ReactInputVerificationCode","autoFocus","length","onChange","onCompleted","placeholder","pValue","value","dataCy","type","passwordMask","emptyValue","Array","fill","React","setActiveIndex","split","setValue","codeInputRef","itemsRef","map","isCodeRegex","RegExp","getItem","index","current","focusItem","focus","blurItem","blur","onItemFocus","onInputKeyUp","key","keyCode","newValue","nextIndex","prevIndex","codeInput","currentItem","isLast","isDeleting","Number","isNaN","onInputChange","e","changeValue","target","isCode","test","onInputBlur","onPaste","preventDefault","pastedString","clipboardData","getData","isNumber","slice","addEventListener","removeEventListener","stringValue","join","isCompleted","renderItemText","itemValue","S","className","ref","autoComplete","inputMode","id","onKeyUp","onBlur","i","role","tabIndex","onFocus"],"mappings":"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"}