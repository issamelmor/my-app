{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar getScrollTop = exports.getScrollTop = function getScrollTop() {\n  return document.body.scrollTop || document.documentElement.scrollTop;\n};\n\n// get vertical offsets of element, taking scrollTop into consideration\nvar getElementOffset = exports.getElementOffset = function getElementOffset(element) {\n  var scrollTop = getScrollTop();\n  var _element$getBoundingC = element.getBoundingClientRect(),\n    top = _element$getBoundingC.top,\n    bottom = _element$getBoundingC.bottom;\n  return {\n    top: Math.floor(top + scrollTop),\n    bottom: Math.floor(bottom + scrollTop)\n  };\n};\n\n// does scrollTop live within element bounds?\nvar doesElementContainScrollTop = exports.doesElementContainScrollTop = function doesElementContainScrollTop(element) {\n  var extraOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var scrollTop = getScrollTop();\n  var offsetTop = getElementOffset(element).top + extraOffset;\n  return scrollTop >= offsetTop && scrollTop < offsetTop + element.offsetHeight;\n};\n\n// is el2's location more relevant than el2,\n// parent-child relationship aside?\nvar checkLocationRelevance = exports.checkLocationRelevance = function checkLocationRelevance(el1, el2) {\n  var _getElementOffset = getElementOffset(el1),\n    top1 = _getElementOffset.top,\n    bottom1 = _getElementOffset.bottom;\n  var _getElementOffset2 = getElementOffset(el2),\n    top2 = _getElementOffset2.top,\n    bottom2 = _getElementOffset2.bottom;\n  if (top1 === top2) {\n    if (bottom1 === bottom2) {\n      // top and bottom of compared elements are the same,\n      // so return one randomly in a deterministic way\n      return el1 < el2;\n    }\n    // top of compared elements is the same, so return whichever\n    // element has its bottom higher on the page\n    return bottom2 < bottom1;\n  }\n  // top of compared elements differ, so return true\n  // if tested element has its top lower on the page\n  return top2 > top1;\n};\n\n// check if el2 is more relevant than el1, considering child-parent\n// relationships as well as node location.\nvar checkElementRelevance = exports.checkElementRelevance = function checkElementRelevance(el1, el2) {\n  if (el1.contains(el2)) {\n    // el2 is child, so it gains relevance priority\n    return true;\n  } else if (!el2.contains(el1) && checkLocationRelevance(el1, el2)) {\n    // el1 and el2 are unrelated, but el2 has a better location,\n    // so it gains relevance priority\n    return true;\n  }\n  return false;\n};\n\n// given a set of anchors, find which one is, given the following logic:\n// 1. children nodes are more relevant than parent nodes\n// 2. if neither node contains the other, and their top locations differ,\n//    the node with the top lower on the page is more relevant\n// 3. if neither node contains the other, and their top locations are the same,\n//    the node with the bottom higher on the page is more relevant\n// 4. if neither node contains the other, and their top and bottom locations\n//    are the same, a node is chosen at random, in a deterministic way,\n//    to be more relevant.\nvar getBestAnchorGivenScrollLocation = exports.getBestAnchorGivenScrollLocation = function getBestAnchorGivenScrollLocation(anchors, offset) {\n  var bestId = void 0,\n    bestElement = void 0;\n  Object.keys(anchors).forEach(function (id) {\n    var element = anchors[id];\n    if (doesElementContainScrollTop(element, offset)) {\n      if (!bestElement || checkElementRelevance(bestElement, element)) {\n        bestElement = element;\n        bestId = id;\n      }\n    }\n  });\n  return bestId;\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","getScrollTop","document","body","scrollTop","documentElement","getElementOffset","element","_element$getBoundingC","getBoundingClientRect","top","bottom","Math","floor","doesElementContainScrollTop","extraOffset","arguments","length","undefined","offsetTop","offsetHeight","checkLocationRelevance","el1","el2","_getElementOffset","top1","bottom1","_getElementOffset2","top2","bottom2","checkElementRelevance","contains","getBestAnchorGivenScrollLocation","anchors","offset","bestId","bestElement","keys","forEach","id"],"sources":["C:/Users/issam/Documents/Code projects/my-app/node_modules/react-scrollable-anchor/lib/utils/scroll.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar getScrollTop = exports.getScrollTop = function getScrollTop() {\n  return document.body.scrollTop || document.documentElement.scrollTop;\n};\n\n// get vertical offsets of element, taking scrollTop into consideration\nvar getElementOffset = exports.getElementOffset = function getElementOffset(element) {\n  var scrollTop = getScrollTop();\n\n  var _element$getBoundingC = element.getBoundingClientRect(),\n      top = _element$getBoundingC.top,\n      bottom = _element$getBoundingC.bottom;\n\n  return {\n    top: Math.floor(top + scrollTop),\n    bottom: Math.floor(bottom + scrollTop)\n  };\n};\n\n// does scrollTop live within element bounds?\nvar doesElementContainScrollTop = exports.doesElementContainScrollTop = function doesElementContainScrollTop(element) {\n  var extraOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n  var scrollTop = getScrollTop();\n  var offsetTop = getElementOffset(element).top + extraOffset;\n  return scrollTop >= offsetTop && scrollTop < offsetTop + element.offsetHeight;\n};\n\n// is el2's location more relevant than el2,\n// parent-child relationship aside?\nvar checkLocationRelevance = exports.checkLocationRelevance = function checkLocationRelevance(el1, el2) {\n  var _getElementOffset = getElementOffset(el1),\n      top1 = _getElementOffset.top,\n      bottom1 = _getElementOffset.bottom;\n\n  var _getElementOffset2 = getElementOffset(el2),\n      top2 = _getElementOffset2.top,\n      bottom2 = _getElementOffset2.bottom;\n\n  if (top1 === top2) {\n    if (bottom1 === bottom2) {\n      // top and bottom of compared elements are the same,\n      // so return one randomly in a deterministic way\n      return el1 < el2;\n    }\n    // top of compared elements is the same, so return whichever\n    // element has its bottom higher on the page\n    return bottom2 < bottom1;\n  }\n  // top of compared elements differ, so return true\n  // if tested element has its top lower on the page\n  return top2 > top1;\n};\n\n// check if el2 is more relevant than el1, considering child-parent\n// relationships as well as node location.\nvar checkElementRelevance = exports.checkElementRelevance = function checkElementRelevance(el1, el2) {\n  if (el1.contains(el2)) {\n    // el2 is child, so it gains relevance priority\n    return true;\n  } else if (!el2.contains(el1) && checkLocationRelevance(el1, el2)) {\n    // el1 and el2 are unrelated, but el2 has a better location,\n    // so it gains relevance priority\n    return true;\n  }\n  return false;\n};\n\n// given a set of anchors, find which one is, given the following logic:\n// 1. children nodes are more relevant than parent nodes\n// 2. if neither node contains the other, and their top locations differ,\n//    the node with the top lower on the page is more relevant\n// 3. if neither node contains the other, and their top locations are the same,\n//    the node with the bottom higher on the page is more relevant\n// 4. if neither node contains the other, and their top and bottom locations\n//    are the same, a node is chosen at random, in a deterministic way,\n//    to be more relevant.\nvar getBestAnchorGivenScrollLocation = exports.getBestAnchorGivenScrollLocation = function getBestAnchorGivenScrollLocation(anchors, offset) {\n  var bestId = void 0,\n      bestElement = void 0;\n\n  Object.keys(anchors).forEach(function (id) {\n    var element = anchors[id];\n    if (doesElementContainScrollTop(element, offset)) {\n      if (!bestElement || checkElementRelevance(bestElement, element)) {\n        bestElement = element;\n        bestId = id;\n      }\n    }\n  });\n  return bestId;\n};"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}