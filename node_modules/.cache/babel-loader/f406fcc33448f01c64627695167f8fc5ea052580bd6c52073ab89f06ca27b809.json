{"ast":null,"code":"import { useState, createRef, useMemo, useEffect, createElement, Fragment } from 'react';\nimport styled, { createGlobalStyle } from 'styled-components';\nfunction _taggedTemplateLiteralLoose(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n  strings.raw = raw;\n  return strings;\n}\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteralLoose([\"\\n  width: var(--ReactInputVerificationCode-itemWidth);\\n  height: var(--ReactInputVerificationCode-itemHeight);\\n  padding: 0;\\n  border-radius: 4px;\\n  font-size: 1.5rem;\\n  font-weight: 800;\\n  line-height: var(--ReactInputVerificationCode-itemHeight);\\n  text-align: center;\\n  border: 0;\\n  box-shadow: inset 0 0 0 1px #ccc;\\n  transition: box-shadow 0.2s ease-out;\\n\\n  &.is-active {\\n    box-shadow: inset 0 0 0 2px #888;\\n  }\\n\"]);\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n  return data;\n}\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteralLoose([\"\\n  position: absolute;\\n  top: 0;\\n  left: \", \";\\n  opacity: 0;\\n  width: var(--ReactInputVerificationCode-itemWidth);\\n  height: var(--ReactInputVerificationCode-itemHeight);\\n\"]);\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n  return data;\n}\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteralLoose([\"\\n  display: flex;\\n  position: relative;\\n  justify-content: space-between;\\n  width: \", \";\\n\"]);\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n  return data;\n}\nfunction _templateObject() {\n  var data = _taggedTemplateLiteralLoose([\"\\n  :root {\\n    --ReactInputVerificationCode-itemWidth: 4.5rem;\\n    --ReactInputVerificationCode-itemHeight: 5rem;\\n    --ReactInputVerificationCode-itemSpacing: 1rem;\\n  }\\n\"]);\n  _templateObject = function _templateObject() {\n    return data;\n  };\n  return data;\n}\nvar GlobalStyle = createGlobalStyle(_templateObject());\nvar Container = styled.div(_templateObject2(), function (_ref) {\n  var itemsCount = _ref.itemsCount;\n  return \"calc(\\n      var(--ReactInputVerificationCode-itemWidth) * \" + itemsCount + \"\\n      + var(--ReactInputVerificationCode-itemSpacing) * (\" + itemsCount + \" - 1)\\n    )\";\n});\nvar Input = styled.input(_templateObject3(), function (_ref2) {\n  var activeIndex = _ref2.activeIndex;\n  return \"calc(\\n      var(--ReactInputVerificationCode-itemWidth) * \" + activeIndex + \"\\n      + var(--ReactInputVerificationCode-itemSpacing) * \" + activeIndex + \"\\n    )\";\n});\nvar Item = styled.div(_templateObject4());\nvar KEY_CODE = {\n  BACKSPACE: 8,\n  ARROW_LEFT: 37,\n  ARROW_RIGHT: 39,\n  DELETE: 46\n};\nvar ReactInputVerificationCode = function ReactInputVerificationCode(_ref) {\n  var _ref$autoFocus = _ref.autoFocus,\n    autoFocus = _ref$autoFocus === void 0 ? false : _ref$autoFocus,\n    _ref$length = _ref.length,\n    length = _ref$length === void 0 ? 4 : _ref$length,\n    _ref$onChange = _ref.onChange,\n    onChange = _ref$onChange === void 0 ? function () {} : _ref$onChange,\n    _ref$onCompleted = _ref.onCompleted,\n    onCompleted = _ref$onCompleted === void 0 ? function () {} : _ref$onCompleted,\n    _ref$placeholder = _ref.placeholder,\n    placeholder = _ref$placeholder === void 0 ? '·' : _ref$placeholder,\n    pValue = _ref.value,\n    _ref$dataCy = _ref.dataCy,\n    dataCy = _ref$dataCy === void 0 ? 'verification-code' : _ref$dataCy,\n    _ref$type = _ref.type,\n    type = _ref$type === void 0 ? 'text' : _ref$type,\n    _ref$passwordMask = _ref.passwordMask,\n    passwordMask = _ref$passwordMask === void 0 ? '•' : _ref$passwordMask;\n  var emptyValue = new Array(length).fill(placeholder);\n  var _React$useState = useState(-1),\n    activeIndex = _React$useState[0],\n    setActiveIndex = _React$useState[1];\n  var _React$useState2 = useState(pValue ? pValue.split('') : emptyValue),\n    value = _React$useState2[0],\n    setValue = _React$useState2[1];\n  var codeInputRef = createRef();\n  var itemsRef = useMemo(function () {\n    return new Array(length).fill(null).map(function () {\n      return createRef();\n    });\n  }, [length]);\n  var isCodeRegex = new RegExp(\"^[0-9]{\" + length + \"}$\");\n  var getItem = function getItem(index) {\n    var _itemsRef$index;\n    return (_itemsRef$index = itemsRef[index]) === null || _itemsRef$index === void 0 ? void 0 : _itemsRef$index.current;\n  };\n  var focusItem = function focusItem(index) {\n    var _getItem;\n    return (_getItem = getItem(index)) === null || _getItem === void 0 ? void 0 : _getItem.focus();\n  };\n  var blurItem = function blurItem(index) {\n    var _getItem2;\n    return (_getItem2 = getItem(index)) === null || _getItem2 === void 0 ? void 0 : _getItem2.blur();\n  };\n  var onItemFocus = function onItemFocus(index) {\n    return function () {\n      setActiveIndex(index);\n      if (codeInputRef.current) codeInputRef.current.focus();\n    };\n  };\n  var onInputKeyUp = function onInputKeyUp(_ref2) {\n    var key = _ref2.key,\n      keyCode = _ref2.keyCode;\n    var newValue = [].concat(value);\n    var nextIndex = activeIndex + 1;\n    var prevIndex = activeIndex - 1;\n    var codeInput = codeInputRef.current;\n    var currentItem = getItem(activeIndex);\n    var isLast = nextIndex === length;\n    var isDeleting = keyCode === KEY_CODE.DELETE || keyCode === KEY_CODE.BACKSPACE;\n    if (isDeleting) {\n      newValue[activeIndex] = placeholder;\n      setValue(newValue);\n      if (activeIndex > 0) {\n        setActiveIndex(prevIndex);\n        focusItem(prevIndex);\n      }\n      return;\n    }\n    if (Number.isNaN(+key)) return;\n    if (codeInput) codeInput.value = '';\n    newValue[activeIndex] = key;\n    setValue(newValue);\n    if (!isLast) {\n      setActiveIndex(nextIndex);\n      focusItem(nextIndex);\n      return;\n    }\n    if (codeInput) codeInput.blur();\n    if (currentItem) currentItem.blur();\n    setActiveIndex(-1);\n  };\n  var onInputChange = function onInputChange(e) {\n    var changeValue = e.target.value;\n    var isCode = isCodeRegex.test(changeValue);\n    if (!isCode) return;\n    setValue(changeValue.split(''));\n    blurItem(activeIndex);\n  };\n  var onInputBlur = function onInputBlur() {\n    if (activeIndex === -1) return;\n    blurItem(activeIndex);\n    setActiveIndex(-1);\n  };\n  useEffect(function () {\n    if (autoFocus && itemsRef[0].current) {\n      itemsRef[0].current.focus();\n    }\n  }, []);\n  useEffect(function () {\n    var codeInput = codeInputRef.current;\n    if (!codeInput) return;\n    var onPaste = function onPaste(e) {\n      var _e$clipboardData;\n      e.preventDefault();\n      var pastedString = (_e$clipboardData = e.clipboardData) === null || _e$clipboardData === void 0 ? void 0 : _e$clipboardData.getData('text');\n      if (!pastedString) return;\n      var isNumber = /^\\d+$/.test(pastedString);\n      if (isNumber) setValue(pastedString.split('').slice(0, length));\n    };\n    codeInput.addEventListener('paste', onPaste);\n    return function () {\n      return codeInput.removeEventListener('paste', onPaste);\n    };\n  }, []);\n  useEffect(function () {\n    var stringValue = value.join('');\n    var isCompleted = stringValue.length === length;\n    if (isCompleted && stringValue !== emptyValue.join('')) onCompleted(stringValue);\n    onChange(stringValue);\n  }, [value, length]);\n  useEffect(function () {\n    if (typeof pValue !== 'string') return;\n    if (pValue === '' && value.join('') === emptyValue.join('')) return;\n    if (pValue !== value.join('')) setValue(pValue.split(''));\n  }, [pValue]);\n  var renderItemText = function renderItemText(itemValue) {\n    if (itemValue === placeholder) return placeholder;\n    return type === 'password' ? passwordMask : itemValue;\n  };\n  return createElement(Fragment, null, createElement(GlobalStyle, null), createElement(Container, {\n    className: 'ReactInputVerificationCode__container',\n    itemsCount: length\n  }, createElement(Input, {\n    ref: codeInputRef,\n    className: 'ReactInputVerificationCode__input',\n    autoComplete: 'one-time-code',\n    type: 'text',\n    inputMode: 'decimal',\n    id: 'one-time-code',\n    onChange: onInputChange,\n    onKeyUp: onInputKeyUp,\n    onBlur: onInputBlur,\n    activeIndex: activeIndex,\n    \"data-cy\": dataCy + \"-otc-input\"\n  }), itemsRef.map(function (ref, i) {\n    return createElement(Item, {\n      key: i,\n      ref: ref,\n      role: 'button',\n      tabIndex: 0,\n      className: \"ReactInputVerificationCode__item \" + (value[i] !== placeholder ? 'is-filled' : '') + \" \" + (i === activeIndex ? 'is-active' : ''),\n      onFocus: onItemFocus(i),\n      \"data-cy\": dataCy + \"-\" + i + \"-item\"\n    }, renderItemText(value[i]));\n  })));\n};\nexport default ReactInputVerificationCode;","map":{"version":3,"names":["GlobalStyle","createGlobalStyle","_templateObject","Container","styled","div","_templateObject2","_ref","itemsCount","Input","input","_templateObject3","_ref2","activeIndex","Item","_templateObject4","KEY_CODE","BACKSPACE","ARROW_LEFT","ARROW_RIGHT","DELETE","ReactInputVerificationCode","autoFocus","_ref$autoFocus","length","_ref$length","onChange","_ref$onChange","onCompleted","_ref$onCompleted","placeholder","_ref$placeholder","pValue","value","dataCy","_ref$dataCy","type","_ref$type","passwordMask","_ref$passwordMask","emptyValue","Array","fill","useState","_React$useState","setActiveIndex","split","_React$useState2","setValue","codeInputRef","createRef","itemsRef","useMemo","map","isCodeRegex","RegExp","getItem","index","_itemsRef$index","current","focusItem","_getItem","focus","blurItem","_getItem2","blur","onItemFocus","onInputKeyUp","key","keyCode","newValue","concat","nextIndex","prevIndex","codeInput","currentItem","isLast","isDeleting","Number","isNaN","onInputChange","e","changeValue","target","isCode","test","onInputBlur","useEffect","onPaste","preventDefault","pastedString","_e$clipboardData","clipboardData","getData","isNumber","slice","addEventListener","removeEventListener","stringValue","join","isCompleted","renderItemText","itemValue","createElement","Fragment","className","ref","autoComplete","inputMode","id","onKeyUp","onBlur","i","role","tabIndex","onFocus"],"sources":["C:\\Users\\issam\\Documents\\Code projects\\my-app\\node_modules\\react-input-verification-code\\src\\styles.ts","C:\\Users\\issam\\Documents\\Code projects\\my-app\\node_modules\\react-input-verification-code\\src\\index.tsx"],"sourcesContent":["import styled, { createGlobalStyle } from 'styled-components';\n\nexport const GlobalStyle = createGlobalStyle`\n  :root {\n    --ReactInputVerificationCode-itemWidth: 4.5rem;\n    --ReactInputVerificationCode-itemHeight: 5rem;\n    --ReactInputVerificationCode-itemSpacing: 1rem;\n  }\n`;\n\ninterface ContainerProps {\n  itemsCount: number;\n}\n\nexport const Container = styled.div<ContainerProps>`\n  display: flex;\n  position: relative;\n  justify-content: space-between;\n  width: ${({ itemsCount }) =>\n    `calc(\n      var(--ReactInputVerificationCode-itemWidth) * ${itemsCount}\n      + var(--ReactInputVerificationCode-itemSpacing) * (${itemsCount} - 1)\n    )`};\n`;\n\ninterface InputProps {\n  activeIndex: number;\n}\n\nexport const Input = styled.input<InputProps>`\n  position: absolute;\n  top: 0;\n  left: ${({ activeIndex }) =>\n    `calc(\n      var(--ReactInputVerificationCode-itemWidth) * ${activeIndex}\n      + var(--ReactInputVerificationCode-itemSpacing) * ${activeIndex}\n    )`};\n  opacity: 0;\n  width: var(--ReactInputVerificationCode-itemWidth);\n  height: var(--ReactInputVerificationCode-itemHeight);\n`;\n\nexport const Item = styled.div`\n  width: var(--ReactInputVerificationCode-itemWidth);\n  height: var(--ReactInputVerificationCode-itemHeight);\n  padding: 0;\n  border-radius: 4px;\n  font-size: 1.5rem;\n  font-weight: 800;\n  line-height: var(--ReactInputVerificationCode-itemHeight);\n  text-align: center;\n  border: 0;\n  box-shadow: inset 0 0 0 1px #ccc;\n  transition: box-shadow 0.2s ease-out;\n\n  &.is-active {\n    box-shadow: inset 0 0 0 2px #888;\n  }\n`;\n","import * as React from 'react';\nimport * as S from './styles';\n\nconst KEY_CODE = {\n  BACKSPACE: 8,\n  ARROW_LEFT: 37,\n  ARROW_RIGHT: 39,\n  DELETE: 46,\n};\n\nexport interface ReactInputVerificationCodeProps {\n  autoFocus?: boolean;\n  length?: number;\n  onChange?: (data: string) => void;\n  onCompleted?: (data: string) => void;\n  placeholder?: string;\n  value?: string;\n  dataCy?: string;\n  type?: 'text' | 'password';\n  passwordMask?: string;\n}\n\nconst ReactInputVerificationCode = ({\n  autoFocus = false,\n  length = 4,\n  onChange = () => {},\n  onCompleted = () => {},\n  placeholder = '·',\n  value: pValue,\n  dataCy = 'verification-code',\n  type = 'text',\n  passwordMask = '•',\n}: ReactInputVerificationCodeProps) => {\n  const emptyValue = new Array(length).fill(placeholder);\n\n  const [activeIndex, setActiveIndex] = React.useState<number>(-1);\n  const [value, setValue] = React.useState<string[]>(\n    pValue ? pValue.split('') : emptyValue\n  );\n\n  const codeInputRef = React.createRef<HTMLInputElement>();\n  const itemsRef = React.useMemo(\n    () =>\n      new Array(length).fill(null).map(() => React.createRef<HTMLDivElement>()),\n    [length]\n  );\n\n  const isCodeRegex = new RegExp(`^[0-9]{${length}}$`);\n\n  const getItem = (index: number) => itemsRef[index]?.current;\n  const focusItem = (index: number): void => getItem(index)?.focus();\n  const blurItem = (index: number): void => getItem(index)?.blur();\n\n  const onItemFocus = (index: number) => () => {\n    setActiveIndex(index);\n    if (codeInputRef.current) codeInputRef.current.focus();\n  };\n\n  const onInputKeyUp = ({ key, keyCode }: React.KeyboardEvent) => {\n    const newValue = [...value];\n    const nextIndex = activeIndex + 1;\n    const prevIndex = activeIndex - 1;\n\n    const codeInput = codeInputRef.current;\n    const currentItem = getItem(activeIndex);\n\n    const isLast = nextIndex === length;\n    const isDeleting =\n      keyCode === KEY_CODE.DELETE || keyCode === KEY_CODE.BACKSPACE;\n\n    // keep items focus in sync\n    onItemFocus(activeIndex);\n\n    // on delete, replace the current value\n    // and focus on the previous item\n    if (isDeleting) {\n      newValue[activeIndex] = placeholder;\n      setValue(newValue);\n\n      if (activeIndex > 0) {\n        setActiveIndex(prevIndex);\n        focusItem(prevIndex);\n      }\n\n      return;\n    }\n\n    // if the key pressed is not a number\n    // don't do anything\n    if (Number.isNaN(+key)) return;\n\n    // reset the current value\n    // and set the new one\n    if (codeInput) codeInput.value = '';\n    newValue[activeIndex] = key;\n    setValue(newValue);\n\n    if (!isLast) {\n      setActiveIndex(nextIndex);\n      focusItem(nextIndex);\n      return;\n    }\n\n    if (codeInput) codeInput.blur();\n    if (currentItem) currentItem.blur();\n\n    setActiveIndex(-1);\n  };\n\n  // handle mobile autocompletion\n  const onInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value: changeValue } = e.target;\n    const isCode = isCodeRegex.test(changeValue);\n\n    if (!isCode) return;\n\n    setValue(changeValue.split(''));\n    blurItem(activeIndex);\n  };\n\n  const onInputBlur = () => {\n    // https://github.com/ugogo/react-input-verification-code/issues/1\n    if (activeIndex === -1) return;\n\n    blurItem(activeIndex);\n    setActiveIndex(-1);\n  };\n\n  // autoFocus\n  React.useEffect(() => {\n    if (autoFocus && itemsRef[0].current) {\n      itemsRef[0].current.focus();\n    }\n  }, []);\n\n  // handle pasting\n  React.useEffect(() => {\n    const codeInput = codeInputRef.current;\n    if (!codeInput) return;\n\n    const onPaste = (e: ClipboardEvent) => {\n      e.preventDefault();\n\n      const pastedString = e.clipboardData?.getData('text');\n      if (!pastedString) return;\n\n      const isNumber = /^\\d+$/.test(pastedString);\n      if (isNumber) setValue(pastedString.split('').slice(0, length));\n    };\n\n    codeInput.addEventListener('paste', onPaste);\n    return () => codeInput.removeEventListener('paste', onPaste);\n  }, []);\n\n  React.useEffect(() => {\n    const stringValue = value.join('');\n    const isCompleted = stringValue.length === length;\n\n    if (isCompleted && stringValue !== emptyValue.join(''))\n      onCompleted(stringValue);\n    onChange(stringValue);\n  }, [value, length]);\n\n  React.useEffect(() => {\n    if (typeof pValue !== 'string') return;\n\n    // avoid infinite loop\n    if (pValue === '' && value.join('') === emptyValue.join('')) return;\n\n    // keep internal and external states in sync\n    if (pValue !== value.join('')) setValue(pValue.split(''));\n  }, [pValue]);\n\n  const renderItemText = (itemValue: string) => {\n    if (itemValue === placeholder) return placeholder;\n    return type === 'password' ? passwordMask : itemValue;\n  };\n\n  return (\n    <React.Fragment>\n      <S.GlobalStyle />\n\n      <S.Container\n        className='ReactInputVerificationCode__container'\n        // needed for styling\n        itemsCount={length}\n      >\n        <S.Input\n          ref={codeInputRef}\n          className='ReactInputVerificationCode__input'\n          autoComplete='one-time-code'\n          type='text'\n          inputMode='decimal'\n          id='one-time-code'\n          // use onKeyUp rather than onChange for a better control\n          // onChange is still needed to handle the autocompletion\n          // when receiving a code by SMS\n          onChange={onInputChange}\n          onKeyUp={onInputKeyUp}\n          onBlur={onInputBlur}\n          // needed for styling\n          activeIndex={activeIndex}\n          data-cy={`${dataCy}-otc-input`}\n        />\n\n        {itemsRef.map((ref, i) => (\n          <S.Item\n            key={i}\n            ref={ref}\n            role='button'\n            tabIndex={0}\n            className={`ReactInputVerificationCode__item ${\n              value[i] !== placeholder ? 'is-filled' : ''\n            } ${i === activeIndex ? 'is-active' : ''}`}\n            onFocus={onItemFocus(i)}\n            data-cy={`${dataCy}-${i}-item`}\n          >\n            {renderItemText(value[i])}\n          </S.Item>\n        ))}\n      </S.Container>\n    </React.Fragment>\n  );\n};\n\nexport default ReactInputVerificationCode;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}